       	     +-------------------------+
             | CSCC69                  |
             | PROJECT 4: FILE SYSTEMS |
             | DESIGN DOCUMENT         |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum inode_type{
   INODE_TYPE_FILE
   INODE_TYPE_DIR
};

struct thread {
   ...
   struct dir *cwd;   /* Thread's working directory */
};

struct inode_disk {
   ...
   enum inode_type type;    /* The type of inode, e.g. directory */
   block_sector_t parent;   /* Sector number of parent, if type == INODE_TYPE_DIR, NULL otherwise. */
   uint32_t unused[123];    /* Not used, size 123 b/c of new enum and parent */
};

NOTE: Some other struct definitions were moved into their respective header files.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

The traversal takes in a file/directory path and a starting directory. 
If the path begins with a “/”, we change the starting directory to be the 
root. From here, we make use of “strtok_r” with the delimiter “/” and walk 
through the path.

If a given token is “.”, we do nothing. If it is “..”, we go up a 
directory via a call to “dir_get_parent()”. Otherwise, it is a possible 
file/directory name. If it is a directory, we go into it an continue, 
otherwise we stop updating the “cwd” variable and continue.

We continue till the end so we can make note of the last segment, 
this is especially useful in the syscalls “mkdir” and “chdir”, where 
it tells us the directory to create or go into.

In order to handle relative paths, we make use of the starting 
directory that is passed in to “resolve()” and do all the lookups on it as described above.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Whenever we are creating/removing a file or directory, we make use of 
filesystem locks that ensure only a single thread can modify a given 
directory at a time. This ensures that if Thread A removes a file while 
Thread B tries to access it, the “removed” flag of the inode will be 
toggled to true and the read will fail. Further, making use of 
“dir_open”/”dir_reopen” and their file counterparts helps us ensure 
that we’re working on the latest version.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

Yes, the directory can be removed if it is open by another process 
(or if it is the current working directory). The restriction on this, 
however, is that the directory *must* be empty before deleting it.

To handle the case of subsequent reads/writes to a deleted directory, 
we again make use of the “removed” flag in each inode at both the syscall 
and “resolve()” levels and return the appropriate values to indicate 
failure (e.g. -1, NULL, false, etc.) Therefore, all further filesystem 
operations on the deleted directory will be safely rejected, where then 
the process can use “chdir()” to navigate elsewhere. The helper methods 
“dir_open”/”dir_reopen” and their file counterparts also help with this.


---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We chose to have each process keep track of its current working directory 
as part of the “thread” struct. This made it very easy to update (via a call 
to “chdir()”, or in the case of “exec” syscall when the child inherits the 
parent’s current working directory), and also made accessing it mostly trivial. 
Instead of accessing it directly (e.g. thread_current()->cwd) a method 
“thread_cwd()” was created. 

This abstraction lets us run checks on the cwd, such as if it’s NULL then 
we know to return the root directory. Further, all calls to “thread_cwd()” 
will re-open the directory to ensure the system has the latest version, 
and this helps with our solution to B5 by preventing navigation to a 
non-existent directory or opening a non-existent file.


                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
