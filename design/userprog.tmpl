             +--------------------------+
             | CSCC69                   |
             | PROJECT 2: USER PROGRAMS |
             | DESIGN DOCUMENT          |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Bilal Ahmed <bill.ahmed@mail.utoronto.ca>
Tanner Bergeron tanner.bergeron@mail.utoronto.ca
Tanaan Karunakaran tanaan.karunakaran@mail.utoronto.ca

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// A limit to the number of arguments to a binary execution
static int MAX_ARG_SIZE = 128;

// Additions to struct thread
char process_name[32];              /* The name given to process attached to this thread. */
bool waiting_on_child;              /* Whether this thread is waiting on another one or not. */
int child_exec_loaded;              /* Whether or not child loaded executable. */
struct semaphore child_exec_status; /* Synchronization used to communicate if child loaded properly. */
int exit_status;                    /* Exit status of current thread. */
int child_exit_status;              /* Status of this thread's child upon exiting. */
struct list child_threads;          /* Keep track of all children spawned by current thread. */
struct list_elem child_elem;        /* List element for when this thread is child of another. */
struct thread *parent;              /* Parent that might be waiting on this thread. */

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument parsing happens very closely to the way it was described in the handout. It starts in the 
call to “setup_stack(...)”, and if allocating user page is successful (line 502), we continue. 

This function was modified to accept two additional parameters: “int argc” and “char **argv”. 
These are created in “load(...)” using “strtok_r” to get all arguments (including file name) 
as well as a counter to keep track of the number of arguments (separated by any number of 
white space characters).

Initially, the arguments are in the wrong order (left-to-right). To account for this, we 
work backwards in “setup_stack” (since we’re given argc, this is trivial) and copy the 
contents onto the stack, and decrement stack pointer accordingly. Although it is not necessary 
to copy the argument values themselves in this order, it makes copying the addresses to each 
arg easier as well (in “STEP 4”, we also work backwards from argc). This helps ensure that the 
arguments are in the correct order for when the program executes. We also set a limit MAX_ARG_SIZE 
for the number of arguments allowed as well as their lengths, and this limit was chosen such that 
it fits in the 4kb page limit given to us (violating this limit exits the process with status -1).



---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

According to the official man pages of “strtok_r”, this version is “reentrant”, meaning that it 
can resume even after it’s been interrupted (since we pass in our own pointer, and that pointer 
is updated in each iteration of the for loop). This ensures that something like a timer interrupt 
will not cause issues between multiple threads trying to run “process_start” (since this calls 
“load”, where arg parsing via strtok_r is done).

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.



                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Limit a thread to have at most 128 open descriptors.
#define THREAD_MAX_FILES 128

// A lock to stop multiple calls to a modification of a file.
struct lock modification_lock;

// Changes to struct thread
struct file *open_descriptors[THREAD_MAX_FILES]; /* Array of open file pointers */

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each thread has an array of file descriptors that it uses to track it’s open files. Since we have limited a thread to THREAD_MAX_FILES open file descriptors, the kernel assigns the opened file to the corresponding smallest open index in the file descriptor array of the calling process. This makes it easy to lookup and give out file descriptors to threads independently. The array stores pointers to the files themselves. So thread->open_descriptors[15] would be the file associated with fd 17 (because we offset the fd by 2 since 0 and 1 are reserved). This lets multiple threads open the same file, and even more than once.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Inside each system call we validate the stack pointer (esp) and calculate the addresses of remaining 
arguments, based on how many we expect there to be. More details regarding this are provided in B6. 
To return the value to the caller, we store the result in (eax) parameter of the interrupt stack frame. 
Since we decided to follow the first method of checking syscall arguments, most of our code was 
relating to error checking. 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

If the entire chunk is to be copied continuously, then the minimum number of calls to pagedir_get_page would be 1, since we can check the memory address at the top and the size of what we’re trying to copy to know if it will fit in memory. If each byte were to be copied individually, then we would have a maximum of 4096 calls to pagedir_get_page because we would need to check whether the address of each byte fits in the thread’s page. 

If the system call were to copy 2 bytes, it would also do at best 1 call to pagedir_get_page (like before, we calculate if it fits in memory), or a maximum of 2 calls if each byte is added one-by-one. There likely is room for improvement, as we were shown in lecture we can use various techniques to speed up the process of finding free memory, such as by using bitmaps or a doubly-linked-circular list of open pages. Using such a technique would let us quickly jump around within the page itself.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The “wait” system call validates the given PID, and calls process_wait directly. After that, process_wait 
will keep track of which child it is waiting for, and will continually yield until that specific child 
has exited. During the child exiting, it will give its return value to the parent. Upon terminating, 
the parent process is free to execute and will immediately return the child’s exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The strategy we adopted was to abstract all validations and error handling into their own functions. We 
noticed that all of the system calls had common ground when checking their values. With this in mind, 
we gathered the pointers to where each data was and passed that along to “validate_user_address”. This 
helper method would go through many checks and exit with status of -1 if even a single check failed. 

Most of this error handling was called inside the large “switch” statement in syscall.c, although in some 
cases we were able to abstract behind the syscall itself. An example of such an abstraction would be with 
the various read/write operations to the file system. These operations were supported by calls to 
“thread_get_file_by_fd” and “exit_if_null” which allowed us to exit before attempting a invalid action. We 
also found that buffers can be tricky to validate. To help combat this, we made use of two methods: a call 
to “validate_string_value” in addition to dereferencing the buffer address and ensuring it was within user 
page boundaries via validate_user_address.

An example of these strategies being used would be in the system call “SYS_WRITE”. We start by calculating 
the address of each argument we need, then validating them via “validate_user_address”. At this point we 
are confident the user memory exists and is within page boundaries, so we dereference them and call 
“write(...)”. In the case where we are writing to a file, “thread_get_file_by_fd” and “exit_if_null” are 
used to safeguard writing to invalid files and the acquiring of “modification_lock” ensures only one thread 
can write to the file system at all. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Our code ensures this by downing a semaphore in exec, and waiting on the child to up it (the semaphore is 
passed by reference) inside the call to start_process. Regardless of what the load status is, the child will 
update its parent with an integer value denoting the status, and up the semaphore it was given. It then immediately 
yields to let the parent return the exec status (TID if successfully, -1 otherwise). Further, the child thread calls 
thread_exit if not successful, ensuring that its behaviour is consistent with what is expected.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

The function process_wait was implemented such that it checks if the child is still running and in the ready_thread 
list. If so, then the parent will continually yield until the child is done. If the child had already exited before 
a call to “wait”, then our helper method would return NULL and the parent would continue executing normally. If P 
terminates before C, then C will continue running until it is finished, and will free up its resources via a call 
to “thread_exit” and “process_exit”. The same steps apply if P terminates after C.


---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We chose the first method (validating the pointers and dereferencing them) because it made for an easier implementation. Anyone could follow the code and understand what was happening at each step, which also made it easier to debug when something went wrong. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The advantage is that it is quick, and thread dependent. Assigning a new fd to a thread is as easy as iterating over the thread fd array and returning the lowest index which doesn’t have a file pointer already assigned. This also means random opening and closing of fds which causes internal fragmentation of the array has no effect on the algorithm to give out fds. It will still just return the first open fd index.

The disadvantage to this is each thread now has to be initialized with a large empty array of NULL file pointers and is limited to THREAD_MAX_FILES number of open files beyond the 2 open by the kernel for console and keyboard. This increases the size of the kernel stack quite a bit if there are many processes running.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

N/A, we did not change it.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?



